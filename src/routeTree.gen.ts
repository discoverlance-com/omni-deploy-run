/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding.index'
import { Route as AppIndexRouteImport } from './routes/app.index'
import { Route as AppSettingsIndexRouteImport } from './routes/app.settings.index'
import { Route as AppProjectsIndexRouteImport } from './routes/app.projects.index'
import { Route as AppProfileIndexRouteImport } from './routes/app.profile.index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsIndexRoute = AppSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRoute,
} as any)
const AppProjectsIndexRoute = AppProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileIndexRoute = AppProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AppRoute,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/app/profile': typeof AppProfileIndexRoute
  '/app/projects': typeof AppProjectsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/app/profile': typeof AppProfileIndexRoute
  '/app/projects': typeof AppProjectsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/app/profile/': typeof AppProfileIndexRoute
  '/app/projects/': typeof AppProjectsIndexRoute
  '/app/settings/': typeof AppSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/'
    | '/onboarding'
    | '/api/auth/$'
    | '/app/profile'
    | '/app/projects'
    | '/app/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/onboarding'
    | '/api/auth/$'
    | '/app/profile'
    | '/app/projects'
    | '/app/settings'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/'
    | '/onboarding/'
    | '/api/auth/$'
    | '/app/profile/'
    | '/app/projects/'
    | '/app/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  OnboardingIndexRoute: typeof OnboardingIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/settings/': {
      id: '/app/settings/'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/projects/': {
      id: '/app/projects/'
      path: '/projects'
      fullPath: '/app/projects'
      preLoaderRoute: typeof AppProjectsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/profile/': {
      id: '/app/profile/'
      path: '/profile'
      fullPath: '/app/profile'
      preLoaderRoute: typeof AppProfileIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppProfileIndexRoute: typeof AppProfileIndexRoute
  AppProjectsIndexRoute: typeof AppProjectsIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppProfileIndexRoute: AppProfileIndexRoute,
  AppProjectsIndexRoute: AppProjectsIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  OnboardingIndexRoute: OnboardingIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
